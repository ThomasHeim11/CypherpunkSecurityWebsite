name: 🚀 Continuous Deployment

on:
  workflow_run:
    workflows: ['🚀 Continuous Integration']
    types: [completed]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip deployment tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: '600s'

jobs:
  # ===========================
  # DEPLOYMENT VALIDATION
  # ===========================
  validate-deployment:
    name: 🔍 Validate Deployment
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      target-environment: ${{ steps.validation.outputs.target-environment }}
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Validate Deployment Conditions
        id: validation
        run: |
          # Determine target environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET_ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TARGET_ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            TARGET_ENV="staging"
          else
            TARGET_ENV="staging"
          fi

          echo "target-environment=${TARGET_ENV}" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "🎯 Target Environment: ${TARGET_ENV}"

  # ===========================
  # STAGING DEPLOYMENT
  # ===========================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: needs.validate-deployment.outputs.target-environment == 'staging' && needs.validate-deployment.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: https://staging.cypherpunksecurity.com
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build Application (Staging)
        run: npm run build
        env:
          NODE_ENV: staging
          NEXT_PUBLIC_ENVIRONMENT: staging

      - name: 🚀 Deploy to Netlify (Staging)
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions - Staging: ${{ github.sha }}'
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

      - name: 🧪 Post-deployment Smoke Tests (Staging)
        if: ${{ !github.event.inputs.skip_tests }}
        run: |
          echo "🧪 Running smoke tests against staging..."
          npx wait-on https://staging.cypherpunksecurity.com --timeout ${{ env.DEPLOYMENT_TIMEOUT }}
          # Add your smoke tests here
          curl -f https://staging.cypherpunksecurity.com || exit 1

  # ===========================
  # PRODUCTION DEPLOYMENT
  # ===========================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: needs.validate-deployment.outputs.target-environment == 'production' && needs.validate-deployment.outputs.should-deploy == 'true'
    environment:
      name: production
      url: https://cypherpunksecurity.com
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build Application (Production)
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENVIRONMENT: production

      - name: 📊 Performance Budget Check
        run: |
          echo "📊 Checking performance budget..."
          # Add bundle size checks
          du -sh .next/ || true

      - name: 🚀 Deploy to Netlify (Production)
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './out'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Production Deploy: ${{ github.sha }}'
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}

      - name: 🧪 Post-deployment Health Checks (Production)
        if: ${{ !github.event.inputs.skip_tests }}
        run: |
          echo "🧪 Running health checks against production..."
          npx wait-on https://cypherpunksecurity.com --timeout ${{ env.DEPLOYMENT_TIMEOUT }}
          curl -f https://cypherpunksecurity.com || exit 1
          curl -f https://cypherpunksecurity.com/api/health || echo "Health endpoint not available"

      - name: 🔄 Invalidate CDN Cache
        run: |
          echo "🔄 Invalidating CDN cache..."
          # Add CDN cache invalidation if needed

  # ===========================
  # POST-DEPLOYMENT TESTING
  # ===========================
  post-deployment-tests:
    name: 🧪 Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success') && !github.event.inputs.skip_tests
    strategy:
      matrix:
        test-type: [e2e, accessibility, performance]
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 End-to-End Tests
        if: matrix.test-type == 'e2e'
        run: |
          echo "🧪 Running E2E tests..."
          # Add Playwright or Cypress E2E tests here
          echo "E2E tests completed"

      - name: ♿ Accessibility Tests
        if: matrix.test-type == 'accessibility'
        run: |
          echo "♿ Running accessibility tests..."
          npx @axe-core/cli --exit https://staging.cypherpunksecurity.com || true

      - name: ⚡ Performance Tests
        if: matrix.test-type == 'performance'
        run: |
          echo "⚡ Running performance tests..."
          npx lighthouse-ci autorun --config=.lighthouserc.json || true

  # ===========================
  # ROLLBACK MECHANISM
  # ===========================
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production, post-deployment-tests]
    environment:
      name: ${{ needs.validate-deployment.outputs.target-environment }}
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔄 Trigger Rollback
        run: |
          echo "🚨 Deployment failed - initiating rollback..."
          # Add rollback logic here
          echo "Rollback completed"

      - name: 📢 Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,commit,author,action,eventName,ref,workflow
          text: '🚨 Deployment FAILED and ROLLBACK initiated for ${{ needs.validate-deployment.outputs.target-environment }}'

  # ===========================
  # DEPLOYMENT NOTIFICATIONS
  # ===========================
  notify-deployment:
    name: 📢 Deployment Notifications
    runs-on: ubuntu-latest
    needs:
      [
        validate-deployment,
        deploy-staging,
        deploy-production,
        post-deployment-tests,
      ]
    if: always()
    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "📊 Deployment Summary:"
          echo "Environment: ${{ needs.validate-deployment.outputs.target-environment }}"
          echo "Staging Status: ${{ needs.deploy-staging.result }}"
          echo "Production Status: ${{ needs.deploy-production.result }}"
          echo "Post-deployment Tests: ${{ needs.post-deployment-tests.result }}"

      - name: 📢 Success Notification
        if: (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,commit,author,action,eventName,ref,workflow
          text: '✅ Successful deployment to ${{ needs.validate-deployment.outputs.target-environment }}'

      - name: 📢 Failure Notification
        if: (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,commit,author,action,eventName,ref,workflow
          text: '❌ Deployment FAILED for ${{ needs.validate-deployment.outputs.target-environment }}'

      - name: 📊 Create Deployment Issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Deployment Failure - ${new Date().toISOString()}`,
              body: `
              ## Deployment Failure Report
              
              **Environment:** ${{ needs.validate-deployment.outputs.target-environment }}
              **Commit:** ${{ github.sha }}
              **Branch:** ${{ github.ref }}
              **Workflow:** ${{ github.workflow }}
              **Run ID:** ${{ github.run_id }}
              
              **Status:**
              - Staging: ${{ needs.deploy-staging.result }}
              - Production: ${{ needs.deploy-production.result }}
              - Post-deployment Tests: ${{ needs.post-deployment-tests.result }}
              
              Please investigate and resolve the deployment issues.
              `,
              labels: ['bug', 'deployment', 'urgent']
            })
